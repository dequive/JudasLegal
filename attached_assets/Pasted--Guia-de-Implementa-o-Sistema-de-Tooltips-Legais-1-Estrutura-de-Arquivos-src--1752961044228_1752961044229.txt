# Guia de Implementação - Sistema de Tooltips Legais

## 1. Estrutura de Arquivos

```
src/
├── components/
│   ├── LegalTooltip/
│   │   ├── LegalTooltip.jsx
│   │   ├── LegalTerm.jsx
│   │   ├── Tooltip.jsx
│   │   └── index.js
│   └── ...
├── data/
│   └── legalTerms.js
├── hooks/
│   └── useTooltip.js
└── styles/
    └── tooltip.css
```

## 2. Componente Principal - LegalTooltip.jsx

```jsx
import React from 'react';
import { useTooltip } from '../hooks/useTooltip';
import LegalTerm from './LegalTerm';
import Tooltip from './Tooltip';
import { legalTerms } from '../data/legalTerms';

const LegalTooltip = ({ children, className = "" }) => {
  const {
    activeTooltip,
    tooltipPosition,
    tooltipRef,
    handleTooltipClick,
    closeTooltip
  } = useTooltip();

  return (
    <div className={`legal-tooltip-container ${className}`}>
      {children}
      
      {activeTooltip && legalTerms[activeTooltip] && (
        <Tooltip
          {...legalTerms[activeTooltip]}
          position={tooltipPosition}
          onClose={closeTooltip}
          ref={tooltipRef}
        />
      )}
    </div>
  );
};

export default LegalTooltip;
```

## 3. Hook Personalizado - useTooltip.js

```jsx
import { useState, useRef, useEffect } from 'react';

export const useTooltip = () => {
  const [activeTooltip, setActiveTooltip] = useState(null);
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });
  const tooltipRef = useRef(null);

  const handleTooltipClick = (term, event) => {
    event.preventDefault();
    const rect = event.target.getBoundingClientRect();
    
    if (activeTooltip === term) {
      setActiveTooltip(null);
    } else {
      setActiveTooltip(term);
      setTooltipPosition({
        x: rect.left + rect.width / 2,
        y: rect.bottom + window.scrollY
      });
    }
  };

  const closeTooltip = () => {
    setActiveTooltip(null);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (tooltipRef.current && !tooltipRef.current.contains(event.target)) {
        setActiveTooltip(null);
      }
    };

    const handleEscape = (event) => {
      if (event.key === 'Escape') {
        setActiveTooltip(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    document.addEventListener('keydown', handleEscape);
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleEscape);
    };
  }, []);

  return {
    activeTooltip,
    tooltipPosition,
    tooltipRef,
    handleTooltipClick,
    closeTooltip
  };
};
```

## 4. Componente do Termo Legal - LegalTerm.jsx

```jsx
import React from 'react';
import { Info } from 'lucide-react';
import { useTooltip } from '../hooks/useTooltip';

const LegalTerm = ({ term, children, className = "" }) => {
  const { activeTooltip, handleTooltipClick } = useTooltip();
  const isActive = activeTooltip === term;
  
  return (
    <span
      className={`legal-term ${isActive ? 'active' : ''} ${className}`}
      onClick={(e) => handleTooltipClick(term, e)}
      role="button"
      tabIndex={0}
      aria-label={`Explicação do termo legal: ${term}`}
    >
      {children}
      <Info className="legal-term-icon" />
    </span>
  );
};

export default LegalTerm;
```

## 5. Base de Dados dos Termos - legalTerms.js

```javascript
export const legalTerms = {
  'força maior': {
    term: 'Força Maior',
    definition: 'Circunstância imprevista que impede o cumprimento de uma obrigação contratual',
    plainEnglish: 'Algo inesperado acontece (como desastre natural ou guerra) que torna impossível cumprir o prometido no contrato',
    example: 'Se um furacão destrói uma fábrica e impede a entrega dos produtos'
  },
  'indenização': {
    term: 'Indenização',
    definition: 'Compensação por dano, prejuízo ou perda sofrida',
    plainEnglish: 'Pagamento feito para compensar alguém por um prejuízo causado',
    example: 'Pagamento por danos materiais em acidente de trânsito'
  },
  'preclusão': {
    term: 'Preclusão',
    definition: 'Perda do direito de praticar determinado ato processual',
    plainEnglish: 'Quando você perde a oportunidade de fazer algo no processo por não ter feito no tempo certo',
    example: 'Não conseguir mais contestar porque perdeu o prazo de 15 dias'
  },
  'litigância de má-fé': {
    term: 'Litigância de Má-fé',
    definition: 'Conduta processual caracterizada pela intenção de prejudicar ou enganar',
    plainEnglish: 'Quando alguém usa o processo judicial de forma desonesta ou para prejudicar o adversário',
    example: 'Mentir sobre fatos ou apresentar documentos falsos propositalmente'
  },
  'honorários advocatícios': {
    term: 'Honorários Advocatícios',
    definition: 'Remuneração devida ao advogado pelos serviços prestados',
    plainEnglish: 'Valor que deve ser pago ao advogado pelo seu trabalho',
    example: 'Valor fixado pelo juiz que a parte perdedora deve pagar ao advogado da parte vencedora'
  },
  'execução': {
    term: 'Execução',
    definition: 'Procedimento judicial para satisfazer obrigação reconhecida em título executivo',
    plainEnglish: 'Processo usado para forçar alguém a cumprir uma obrigação já reconhecida pela justiça',
    example: 'Penhorar bens do devedor para pagar uma dívida já decidida em sentença'
  }
};
```

## 6. Estilos CSS - tooltip.css

```css
.legal-tooltip-container {
  position: relative;
}

.legal-term {
  position: relative;
  cursor: help;
  text-decoration: underline;
  text-decoration-style: dotted;
  text-decoration-color: #3b82f6;
  padding: 0 4px;
  border-radius: 4px;
  transition: background-color 0.2s ease;
}

.legal-term:hover {
  background-color: #dbeafe;
}

.legal-term.active {
  background-color: #bfdbfe;
}

.legal-term-icon {
  display: inline-block;
  width: 12px;
  height: 12px;
  margin-left: 4px;
  color: #3b82f6;
  vertical-align: baseline;
}

.tooltip {
  position: fixed;
  z-index: 1000;
  background: white;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  padding: 16px;
  max-width: 320px;
  transform: translateX(-50%);
}

.tooltip-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 12px;
}

.tooltip-title {
  font-weight: bold;
  color: #111827;
  font-size: 18px;
}

.tooltip-close {
  color: #9ca3af;
  cursor: pointer;
  transition: color 0.2s ease;
}

.tooltip-close:hover {
  color: #4b5563;
}

.tooltip-content {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.tooltip-section {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.tooltip-label {
  font-weight: 600;
  font-size: 14px;
  margin-bottom: 4px;
}

.tooltip-label.legal {
  color: #374151;
}

.tooltip-label.plain {
  color: #059669;
}

.tooltip-label.example {
  color: #2563eb;
}

.tooltip-text {
  font-size: 14px;
  line-height: 1.4;
}

.tooltip-text.legal {
  color: #4b5563;
}

.tooltip-text.plain {
  color: #047857;
}

.tooltip-text.example {
  color: #1d4ed8;
  font-style: italic;
}
```

## 7. Como Usar na Sua Aplicação

### Exemplo básico:
```jsx
import React from 'react';
import LegalTooltip from './components/LegalTooltip';
import LegalTerm from './components/LegalTooltip/LegalTerm';

function ContractPage() {
  return (
    <LegalTooltip>
      <div className="contract-content">
        <p>
          Em caso de <LegalTerm term="força maior">força maior</LegalTerm>, 
          as partes ficam desobrigadas do cumprimento das obrigações. 
          A parte prejudicada poderá pleitear <LegalTerm term="indenização">indenização</LegalTerm> 
          pelos danos sofridos.
        </p>
      </div>
    </LegalTooltip>
  );
}
```

### Uso com contexto global:
```jsx
// TooltipProvider.jsx
import React, { createContext, useContext } from 'react';
import { useTooltip } from '../hooks/useTooltip';

const TooltipContext = createContext();

export const TooltipProvider = ({ children }) => {
  const tooltipState = useTooltip();
  
  return (
    <TooltipContext.Provider value={tooltipState}>
      {children}
    </TooltipContext.Provider>
  );
};

export const useTooltipContext = () => {
  const context = useContext(TooltipContext);
  if (!context) {
    throw new Error('useTooltipContext deve ser usado dentro do TooltipProvider');
  }
  return context;
};
```

## 8. Personalização para Diferentes Áreas do Direito

```javascript
// Criar diferentes bases de dados por área
export const direitoCivil = {
  // termos específicos do direito civil
};

export const direitoPenal = {
  // termos específicos do direito penal
};

export const direitoTrabalhista = {
  // termos específicos do direito trabalhista
};

// Usar condicionalmente
const getTermsDatabase = (area) => {
  switch(area) {
    case 'civil': return direitoCivil;
    case 'penal': return direitoPenal;
    case 'trabalhista': return direitoTrabalhista;
    default: return legalTerms;
  }
};
```

## 9. Integração com APIs

```javascript
// Para buscar termos dinamicamente
const fetchLegalTerm = async (term) => {
  try {
    const response = await fetch(`/api/legal-terms/${term}`);
    return await response.json();
  } catch (error) {
    console.error('Erro ao buscar termo:', error);
    return null;
  }
};
```

## 10. Melhorias de Acessibilidade

```jsx
// Adicionar suporte ao teclado
const LegalTerm = ({ term, children }) => {
  const handleKeyDown = (event) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      handleTooltipClick(term, event);
    }
  };

  return (
    <span
      className="legal-term"
      onClick={(e) => handleTooltipClick(term, e)}
      onKeyDown={handleKeyDown}
      role="button"
      tabIndex={0}
      aria-label={`Explicação do termo legal: ${term}`}
      aria-expanded={activeTooltip === term}
    >
      {children}
      <Info className="legal-term-icon" aria-hidden="true" />
    </span>
  );
};
```

Este guia fornece uma implementação completa e modular que você pode adaptar às necessidades específicas da sua aplicação Judas. Quer que eu detalhe alguma parte específica ou adicione funcionalidades extras?