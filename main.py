from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import google.generativeai as genai
import os
import re

app = FastAPI(title="Muzaia Legal Assistant API")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5000", "http://0.0.0.0:5000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure Gemini AI
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
model = genai.GenerativeModel('gemini-2.0-flash-preview')

# Data models
class ChatMessage(BaseModel):
    text: str

class ComplexityRating(BaseModel):
    level: int
    emoji: str
    label: str
    color: str

class Citation(BaseModel):
    title: str
    source: str
    relevance: float

class ChatResponse(BaseModel):
    text: str
    citations: List[Citation]
    complexity: ComplexityRating

# Legal complexity rating system
def get_complexity_rating(text: str) -> ComplexityRating:
    legal_terms = [
        'constitui√ß√£o', 'c√≥digo civil', 'c√≥digo penal', 'c√≥digo comercial',
        'habeas corpus', 'mandado de seguran√ßa', 'usucapi√£o', 'prescri√ß√£o',
        'jurisprud√™ncia', 'ac√≥rd√£o', 'recurso', 'apela√ß√£o', 'cassa√ß√£o',
        'responsabilidade civil', 'danos morais', 'indeniza√ß√£o',
        'contrato', 'obriga√ß√£o', 'direito real', 'propriedade',
        'sucess√£o', 'heran√ßa', 'testamento', 'invent√°rio',
        'processo civil', 'processo penal', 'processo administrativo'
    ]
    
    complex_words = [
        'interpreta√ß√£o', 'aplica√ß√£o', 'compet√™ncia', 'jurisdi√ß√£o',
        'legitimidade', 'interesse processual', 'm√©rito',
        'preliminar', 'prejudicial', 'conex√£o', 'contin√™ncia'
    ]
    
    text_lower = text.lower()
    complexity = 0
    
    # Count legal terms
    for term in legal_terms:
        if term in text_lower:
            complexity += 1
    
    # Count complex words (worth more)
    for word in complex_words:
        if word in text_lower:
            complexity += 2
    
    # Text length factor
    if len(text) > 500:
        complexity += 1
    if len(text) > 1000:
        complexity += 2
    
    # Return rating object
    if complexity <= 2:
        return ComplexityRating(level=1, emoji='üü¢', label='Simples', color='#10b981')
    elif complexity <= 5:
        return ComplexityRating(level=2, emoji='üü°', label='Moderado', color='#f59e0b')
    elif complexity <= 8:
        return ComplexityRating(level=3, emoji='üü†', label='Complexo', color='#ef4444')
    else:
        return ComplexityRating(level=4, emoji='üî¥', label='Muito Complexo', color='#dc2626')

# Generate AI response with Gemini
async def generate_ai_response(user_message: str) -> ChatResponse:
    try:
        prompt = f"""
        Voc√™ √© o Judas, um assistente jur√≠dico especializado em legisla√ß√£o mo√ßambicana.
        Responda em portugu√™s europeu (use "vosso/vossa" em vez de "seu/sua").
        
        Pergunta do usu√°rio: {user_message}
        
        Forne√ßa uma resposta detalhada e fundamentada sobre a legisla√ß√£o mo√ßambicana.
        Seja preciso e cite fontes legais relevantes quando poss√≠vel.
        """
        
        response = model.generate_content(prompt)
        ai_text = response.text if response.text else "Desculpe, n√£o consegui processar a vossa pergunta neste momento."
        
        # Generate mock citations (in production, these would come from a RAG system)
        citations = [
            Citation(
                title="C√≥digo Civil de Mo√ßambique",
                source=f"Artigo relacionado √† {user_message[:30]}...",
                relevance=0.85
            ),
            Citation(
                title="Constitui√ß√£o da Rep√∫blica de Mo√ßambique",
                source="Direitos e deveres fundamentais",
                relevance=0.72
            )
        ]
        
        complexity = get_complexity_rating(ai_text)
        
        return ChatResponse(
            text=ai_text,
            citations=citations,
            complexity=complexity
        )
        
    except Exception as e:
        # Fallback response
        fallback_text = f"Com base na vossa pergunta sobre '{user_message}', posso explicar que na legisla√ß√£o mo√ßambicana este aspecto √© regulamentado pelos c√≥digos legais aplic√°veis. Para informa√ß√µes mais espec√≠ficas, recomendo consultar os documentos oficiais."
        
        return ChatResponse(
            text=fallback_text,
            citations=[
                Citation(
                    title="Legisla√ß√£o Mo√ßambicana",
                    source="Documentos oficiais",
                    relevance=0.8
                )
            ],
            complexity=get_complexity_rating(fallback_text)
        )

@app.get("/")
async def root():
    return {"message": "Judas Legal Assistant API", "status": "running"}

@app.post("/api/chat", response_model=ChatResponse)
async def chat_endpoint(message: ChatMessage):
    """
    Process user message and return AI response with complexity rating
    """
    if not message.text.strip():
        raise HTTPException(status_code=400, detail="Mensagem n√£o pode estar vazia")
    
    response = await generate_ai_response(message.text)
    return response

@app.post("/api/complexity", response_model=ComplexityRating)
async def analyze_complexity(message: ChatMessage):
    """
    Analyze text complexity without generating AI response
    """
    if not message.text.strip():
        raise HTTPException(status_code=400, detail="Texto n√£o pode estar vazio")
    
    complexity = get_complexity_rating(message.text)
    return complexity

@app.get("/api/health")
async def health_check():
    return {
        "status": "healthy",
        "gemini_configured": bool(os.getenv("GEMINI_API_KEY")),
        "services": {
            "api": "running",
            "ai": "available" if os.getenv("GEMINI_API_KEY") else "not_configured"
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)