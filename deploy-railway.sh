#!/bin/bash

echo "üöÄ Deploy Muzaia Backend no Railway"
echo "===================================="

# Verificar se est√° no direct√≥rio correcto
if [ ! -f "backend_complete.py" ]; then
    echo "‚ùå Erro: backend_complete.py n√£o encontrado!"
    echo "Execute este script no direct√≥rio raiz do projecto."
    exit 1
fi

# Verificar Railway CLI
if ! command -v railway &> /dev/null; then
    echo "‚ùå Railway CLI n√£o instalado"
    echo ""
    echo "Para instalar:"
    echo "npm install -g @railway/cli"
    echo ""
    echo "Ou baixar de: https://railway.app/cli"
    exit 1
fi

echo "‚úÖ Railway CLI encontrado"

# Login se necess√°rio
if ! railway whoami &> /dev/null; then
    echo "üîê Fazendo login no Railway..."
    railway login
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro no login. Tente novamente."
        exit 1
    fi
fi

echo "‚úÖ Login Railway confirmado"

# Verificar se j√° existe projeto
if [ ! -f "railway.toml" ]; then
    echo "üìã Inicializando projeto Railway..."
    echo ""
    echo "Seleccione as op√ß√µes:"
    echo "1. Empty project"
    echo "2. Nome: muzaia-backend"
    echo "3. P√∫blico: No"
    echo ""
    
    railway init
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro na inicializa√ß√£o do projeto"
        exit 1
    fi
else
    echo "‚úÖ Projeto Railway j√° configurado"
fi

# Configurar vari√°veis de ambiente
echo ""
echo "üîß Configura√ß√£o de Vari√°veis de Ambiente"
echo "========================================"

# Verificar vari√°veis existentes
echo "üìã Vari√°veis actuais:"
railway variables

echo ""
echo "Configurar novas vari√°veis:"

# GEMINI_API_KEY
echo ""
echo "GEMINI_API_KEY (vossa chave do Google Gemini):"
echo "(Pressione Enter para manter actual se j√° existe)"
read -r gemini_key
if [ ! -z "$gemini_key" ]; then
    railway variables set GEMINI_API_KEY="$gemini_key"
    echo "‚úÖ GEMINI_API_KEY configurado"
fi

# DATABASE_URL
echo ""
echo "DATABASE_URL (vossa URL do Supabase PostgreSQL):"
echo "Formato: postgresql://postgres:password@db.xxx.supabase.co:5432/postgres"
echo "(Pressione Enter para manter actual se j√° existe)"
read -r database_url
if [ ! -z "$database_url" ]; then
    railway variables set DATABASE_URL="$database_url"
    echo "‚úÖ DATABASE_URL configurado"
fi

# Configurar vari√°veis de sistema
railway variables set PYTHONPATH="/app"
railway variables set PORT="8000"
echo "‚úÖ Vari√°veis de sistema configuradas"

# Mostrar configura√ß√£o final
echo ""
echo "üìã Configura√ß√£o final:"
railway variables

# Confirmar deploy
echo ""
echo "üöÄ PRONTO PARA DEPLOY"
echo "===================="
echo ""
echo "Configura√ß√£o:"
echo "- Backend: backend_complete.py"
echo "- Depend√™ncias: requirements.txt"
echo "- Configura√ß√£o: railway.json + nixpacks.toml"
echo ""

read -p "Deseja prosseguir com o deploy? (y/n): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Deploy cancelado pelo utilizador"
    exit 1
fi

# Fazer deploy
echo ""
echo "üöÄ Fazendo deploy no Railway..."
echo "Isto pode demorar alguns minutos..."

railway up

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ DEPLOY CONCLU√çDO COM SUCESSO!"
    echo "==============================="
    echo ""
    
    # Obter informa√ß√µes do deploy
    echo "üìä Informa√ß√µes do deploy:"
    railway status
    
    echo ""
    echo "üåê Vosso backend est√° dispon√≠vel em:"
    BACKEND_URL=$(railway status --json 2>/dev/null | python3 -c "import json,sys; data=json.load(sys.stdin); print(data.get('deployments', [{}])[0].get('url', 'URL n√£o dispon√≠vel'))" 2>/dev/null || echo "Executar 'railway status' para ver URL")
    echo "$BACKEND_URL"
    
    echo ""
    echo "üß™ TESTES RECOMENDADOS:"
    echo "======================"
    echo ""
    echo "1. Health check:"
    echo "   curl $BACKEND_URL/health"
    echo ""
    echo "2. Testar chat:"
    echo "   curl -X POST $BACKEND_URL/api/chat \\"
    echo "     -H 'Content-Type: application/json' \\"
    echo "     -d '{\"message\": \"Ol√° Muzaia!\"}'"
    echo ""
    echo "3. Testar hierarquia legal:"
    echo "   curl $BACKEND_URL/api/legal/hierarchy"
    echo ""
    echo "üìã PR√ìXIMOS PASSOS:"
    echo "=================="
    echo ""
    echo "1. Testar os endpoints acima"
    echo "2. Configurar frontend para usar:"
    echo "   BACKEND_URL=$BACKEND_URL"
    echo "3. Deploy frontend no Vercel:"
    echo "   vercel --prod --env BACKEND_URL=$BACKEND_URL"
    echo ""
    echo "üìñ Monitoriza√ß√£o:"
    echo "   railway logs --follow (logs em tempo real)"
    echo "   railway status (status do servi√ßo)"
    
else
    echo ""
    echo "‚ùå ERRO NO DEPLOY"
    echo "================"
    echo ""
    echo "Poss√≠veis solu√ß√µes:"
    echo "1. Verificar logs: railway logs"
    echo "2. Verificar vari√°veis: railway variables"
    echo "3. Verificar requirements.txt"
    echo "4. Tentar novamente: railway up"
    echo ""
    echo "Para suporte: https://railway.app/help"
fi