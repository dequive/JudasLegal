#!/bin/bash

echo "‚ñ≤ Configura√ß√£o Completa Vercel + GitHub"
echo "======================================="
echo ""

# Verificar depend√™ncias
check_dependencies() {
    echo "üîç Verificando depend√™ncias..."
    
    if ! command -v git &> /dev/null; then
        echo "‚ùå Git n√£o encontrado. Instalar: apt install git"
        exit 1
    fi
    
    if ! command -v npm &> /dev/null; then
        echo "‚ùå npm n√£o encontrado. Instalar Node.js"
        exit 1
    fi
    
    echo "‚úÖ Depend√™ncias verificadas"
}

# Instalar Vercel CLI
install_vercel_cli() {
    echo ""
    echo "üì¶ Instalando Vercel CLI..."
    
    if ! command -v vercel &> /dev/null; then
        npm i -g vercel
        echo "‚úÖ Vercel CLI instalado"
    else
        echo "‚ÑπÔ∏è Vercel CLI j√° instalado"
    fi
}

# Configurar Git
setup_git() {
    echo ""
    echo "üîß Configurando Git..."
    
    if [ -z "$(git config --global user.name)" ]; then
        read -p "Nome Git: " git_name
        git config --global user.name "$git_name"
    fi
    
    if [ -z "$(git config --global user.email)" ]; then
        read -p "Email Git: " git_email
        git config --global user.email "$git_email"
    fi
    
    echo "‚úÖ Git configurado"
}

# Preparar reposit√≥rio
prepare_repository() {
    echo ""
    echo "üìÅ Preparando reposit√≥rio..."
    
    # Inicializar Git se necess√°rio
    if [ ! -d ".git" ]; then
        git init
        git branch -M main
    fi
    
    # Criar/atualizar .gitignore
    cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# Environment variables
.env
.env.local
.env.production

# Logs
*.log
logs/

# OS
.DS_Store
Thumbs.db

# IDEs
.vscode/
.idea/
*.swp
*.swo

# Uploads e backups
uploads/
*.pdf
*.docx
*.backup
*.bak

# Database
*.db
*.sqlite
*.sqlite3

# Cache
.cache/
.pytest_cache/

# Vercel
.vercel
EOF
    
    # Adicionar arquivos
    git add .
    
    # Commit
    if git diff --cached --quiet; then
        echo "‚ÑπÔ∏è Nenhuma altera√ß√£o para commit"
    else
        git commit -m "Configure Muzaia backend for Vercel deployment

- FastAPI backend with Gemini AI integration
- Vercel serverless deployment configuration
- PostgreSQL/Supabase database support
- Legal document processing and RAG system
- Admin interface for document management"
        echo "‚úÖ Commit realizado"
    fi
}

# Login Vercel
vercel_login() {
    echo ""
    echo "üîë Login Vercel..."
    
    if ! vercel whoami &> /dev/null; then
        echo "Fazendo login no Vercel..."
        vercel login
    else
        echo "‚úÖ J√° logado no Vercel: $(vercel whoami)"
    fi
}

# Deploy inicial
initial_deploy() {
    echo ""
    read -p "Fazer deploy inicial agora? (y/n): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üöÄ Fazendo deploy inicial..."
        vercel --prod
        echo "‚úÖ Deploy inicial conclu√≠do"
        
        # Obter URL do projeto
        PROJECT_URL=$(vercel ls | grep "muzaia" | head -n 1 | awk '{print $2}')
        if [ -n "$PROJECT_URL" ]; then
            echo ""
            echo "üéØ URL do projeto: https://$PROJECT_URL"
            echo "üß™ Health check: https://$PROJECT_URL/health"
            echo "üìñ Docs: https://$PROJECT_URL/docs"
        fi
    fi
}

# Configurar vari√°veis de ambiente
setup_environment_variables() {
    echo ""
    read -p "Configurar vari√°veis de ambiente? (y/n): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üîß Configurando vari√°veis de ambiente..."
        
        read -p "GEMINI_API_KEY: " gemini_key
        read -p "DATABASE_URL: " database_url
        
        echo ""
        echo "‚öôÔ∏è Adicionando vari√°veis ao Vercel..."
        
        # Adicionar vari√°veis para produ√ß√£o
        echo "$gemini_key" | vercel env add GEMINI_API_KEY production
        echo "$database_url" | vercel env add DATABASE_URL production
        
        # Adicionar vari√°veis para preview
        echo "$gemini_key" | vercel env add GEMINI_API_KEY preview
        echo "$database_url" | vercel env add DATABASE_URL preview
        
        echo "‚úÖ Vari√°veis configuradas"
        
        # Redeploy para aplicar vari√°veis
        echo ""
        echo "üîÑ Fazendo redeploy para aplicar vari√°veis..."
        vercel --prod
        echo "‚úÖ Redeploy conclu√≠do"
    fi
}

# Mostrar instru√ß√µes GitHub (opcional)
show_github_instructions() {
    echo ""
    read -p "Configurar integra√ß√£o GitHub? (y/n): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo ""
        echo "üêô INSTRU√á√ïES GITHUB:"
        echo "===================="
        echo ""
        
        read -p "Username GitHub: " github_username
        
        echo ""
        echo "1. Criar reposit√≥rio GitHub:"
        echo "   ‚Ä¢ https://github.com/new"
        echo "   ‚Ä¢ Nome: muzaia-backend"
        echo "   ‚Ä¢ P√∫blico (recomendado)"
        echo ""
        
        echo "2. Push para GitHub:"
        echo "   git remote add origin https://github.com/${github_username}/muzaia-backend.git"
        echo "   git push -u origin main"
        echo ""
        
        echo "3. No painel Vercel:"
        echo "   ‚Ä¢ https://vercel.com/dashboard"
        echo "   ‚Ä¢ Import Project"
        echo "   ‚Ä¢ Conectar GitHub repository"
        echo "   ‚Ä¢ Deploy autom√°tico activado"
        echo ""
        
        echo "‚ú® COMANDOS PRONTOS:"
        echo "git remote add origin https://github.com/${github_username}/muzaia-backend.git"
        echo "git push -u origin main"
    fi
}

# Mostrar resultados finais
show_final_results() {
    echo ""
    echo "üéâ CONFIGURA√á√ÉO COMPLETA!"
    echo "========================"
    echo ""
    
    # Obter informa√ß√µes do projeto
    PROJECT_URL=$(vercel ls | grep -v "Age" | head -n 1 | awk '{print $2}')
    
    if [ -n "$PROJECT_URL" ]; then
        echo "üéØ URLs DO PROJETO:"
        echo "‚Ä¢ Backend: https://$PROJECT_URL"
        echo "‚Ä¢ Health: https://$PROJECT_URL/health"
        echo "‚Ä¢ Docs: https://$PROJECT_URL/docs"
        echo "‚Ä¢ Chat: https://$PROJECT_URL/api/chat"
        echo ""
        
        echo "üß™ TESTAR AGORA:"
        echo "curl https://$PROJECT_URL/health"
    else
        echo "üéØ URLs GEN√âRICAS:"
        echo "‚Ä¢ Backend: https://muzaia-backend-xxx.vercel.app"
        echo "‚Ä¢ Health: https://muzaia-backend-xxx.vercel.app/health"
        echo "‚Ä¢ Docs: https://muzaia-backend-xxx.vercel.app/docs"
    fi
    
    echo ""
    echo "üí° GEST√ÉO CONT√çNUA:"
    echo "‚Ä¢ Deploy: vercel --prod"
    echo "‚Ä¢ Logs: vercel logs"
    echo "‚Ä¢ Domains: vercel domains"
    echo "‚Ä¢ Painel: https://vercel.com/dashboard"
    echo ""
    
    echo "üí∞ CUSTOS VERCEL:"
    echo "‚Ä¢ Gratuito para hobby projects"
    echo "‚Ä¢ 100GB bandwidth/m√™s"
    echo "‚Ä¢ Execu√ß√µes serverless ilimitadas"
    echo "‚Ä¢ HTTPS e CDN inclu√≠dos"
    echo ""
    
    echo "üöÄ Muzaia est√° pronto no Vercel!"
}

# Execu√ß√£o principal
main() {
    check_dependencies
    install_vercel_cli
    setup_git
    prepare_repository
    vercel_login
    initial_deploy
    setup_environment_variables
    show_github_instructions
    show_final_results
}

# Executar se chamado directamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi